import { afterEach, beforeEach, describe, expect, it, vi } from "vitest"
import { flushPromises, mount } from "@vue/test-utils"
import { createTestingPinia } from "@pinia/testing"
import axios, { AxiosError } from 'axios'

import { useUserStore } from '@/stores/user.js'

import records from '../../__fixtures__/search-records.json' assert { type: 'json' }
import userFixture from '../../__fixtures__/user.json' assert { type: 'json' }

import Page from './index.vue'

const pinia = createTestingPinia({ createSpy: vi.fn, stubActions: false })
const user = useUserStore(pinia)

beforeEach(() => user.user = userFixture)
afterEach(() => user.$reset())

describe("certification/exploitations", () => {
  it("should display a page with a warning because of no results", async () => {
    axios.__createMock.post.mockResolvedValueOnce({
      data: {
        pagination: {
          total: 0,
          page: 1,
          page_max: 1
        },
        records: []
      }
    })

    const wrapper = mount(Page)

    expect(wrapper.find('tbody').text()).toContain('Chargement des données…')

    await flushPromises()
    expect(wrapper.find('.fr-alert__title').text()).toContain('Aucune exploitation trouvée')
  })

  it("should display a page with 2 results and 2 pages", async () => {
    axios.__createMock.post.mockResolvedValueOnce({
      data: {
        pagination: {
          total: 4,
          page: 1,
          page_max: 2
        },
        records: records.slice(0, 2)
      }
    })

    const wrapper = mount(Page)

    await flushPromises()
    expect(axios.__createMock.post).toHaveBeenCalled(1)
    expect(wrapper.findAll('.operator-record')).toHaveLength(2)
    expect(wrapper.find('.results-total').text()).toEqual('2 sur 4 résultats')
    expect(wrapper.find('.pagination-page-previous').attributes('disabled')).toEqual('')
    expect(wrapper.find('.pagination-page-next').attributes('disabled')).toBeUndefined()

    // navigate to next page
    axios.__createMock.post.mockResolvedValue({
      data: {
        pagination: {
          total: 4,
          page: 2,
          page_max: 2
        },
        records: records.slice(2, 4)
      }
    })

    await wrapper.find('.pagination-page-next').trigger('click')
    await wrapper.setProps({ page: '2' })   // workaround vue-router not picking up above change
    await flushPromises()

    expect(axios.__createMock.post).toHaveBeenCalled(2)
    expect(wrapper.find('.pagination-page-previous').attributes('disabled')).toBeUndefined()
    expect(wrapper.find('.pagination-page-next').attributes('disabled')).toEqual('')

    await wrapper.find('#search-results-page-selector').setValue('1')
    wrapper.setProps({ page: '1' })   // workaround vue-router not picking up above change
    expect(wrapper.emitted()).toHaveProperty('change')
    await flushPromises()
    expect(axios.__createMock.post).toHaveBeenCalled(3)
  })

  it("should search, sort then reset filters", async () => {
    axios.__createMock.post.mockResolvedValue({
      data: {
        pagination: {
          total: 4,
          page: 1,
          page_max: 1
        },
        records
      }
    })

    const wrapper = mount(Page, {
      props: { search: 'ferme', page: '2', sort: 'nom', order: 'asc' }
    })

    await flushPromises()
    expect(wrapper.findAll('.operator-record')).toHaveLength(4)
    expect(wrapper.findAll('thead [aria-sort]')).toHaveLength(1)
    expect(wrapper.find('.table-header-nom').attributes()).toHaveProperty('aria-sort', 'ascending')
    expect(wrapper.find('.table-header-nom button').attributes()).toHaveProperty('aria-pressed', 'true')

    // // change search to nothing
    // // it should reset the filters
    await wrapper.find('#search-input').setValue('')
    await wrapper.find('form').trigger('submit')

    // todo: rather test against a router that works in tests, outside of components
    await wrapper.setProps({ search: '', page: '1' })
    await flushPromises()

    expect(axios.__createMock.post).toHaveBeenLastCalledWith('/v2/certification/search', { input: '', page: 1, sort: 'audit_date', order: 'desc' })
    expect(wrapper.find('.table-header-audit_date').attributes()).toHaveProperty('aria-sort', 'descending')
    expect(wrapper.find('.table-header-audit_date button').attributes()).toHaveProperty('aria-pressed', 'true')
  })

  it('should respond with an error in case server is unreachable', async () => {
    const error = new AxiosError('Network Error', 'ERR_NETWORK')
    axios.__createMock.post.mockRejectedValueOnce(error)

    const wrapper = mount(Page)
    await flushPromises()

    expect(wrapper.find('tbody').text()).toContain('Une erreur de réseau est survenue')
  })

  it('should throw an error when uncaught', () => {
    const error = new AxiosError('Server is down')
    error.response = { status: 500 }
    axios.__createMock.post.mockRejectedValueOnce(error)

    const wrapper = mount(Page, {
      global: {
        config: {
          errorHandler (error) {
            expect(error.message).toBe('Server is down')
          }
        }
      }
    })
  })
})
