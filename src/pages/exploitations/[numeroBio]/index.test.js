import { afterEach, beforeEach, describe, expect, it, vi } from "vitest"
import { flushPromises, mount } from "@vue/test-utils"
import { createTestingPinia } from "@pinia/testing"
import { useOperatorStore } from "@/stores/operator.js"
import { usePermissions } from '@/stores/permissions.js'

import Page from './index.vue'
import OperatorSetupFlow from '@/components/setup/Flow/index.vue'

import operator from '@/utils/__fixtures__/operator.json' assert { type: 'json' }

const pinia = createTestingPinia({ createSpy: vi.fn, stubActions: false })
const operatorStore = useOperatorStore(pinia)
const permissions = usePermissions(pinia)

beforeEach(() => {
  operatorStore.operator = operator
})

afterEach(() => {
  operatorStore.$reset()
  permissions.$reset()
})

describe("exploitations/:numeroBio", () => {
  it("should print a 'CrÃ©er une nouvelle version' only for OC and Agri roles", async () => {
    const wrapper = mount(Page, {
      props: {
        numeroBio: '1234'
      }
    })

    expect(wrapper.find('.header .fr-btn').exists()).toBe(false)

    //
    permissions.isAgri = false
    permissions.isOc = true
    await flushPromises()
    expect(wrapper.find('.header .fr-btn').exists()).toBe(true)

    //
    permissions.isAgri = true
    permissions.isOc = false
    await flushPromises()
    expect(wrapper.find('.header .fr-btn').exists()).toBe(true)
  })

  it('should print the OperatorSetup flow when no records are found', () => {
    operatorStore.records = []

    const wrapper = mount(Page, {
      props: {
        numeroBio: '1234'
      }
    })

    expect(wrapper.findComponent(OperatorSetupFlow).exists()).toBe(true)
  })
})
